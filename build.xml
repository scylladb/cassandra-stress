<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project basedir="." default="jar" name="cassandra-stress"
    xmlns:artifact="antlib:org.apache.maven.artifact.ant"
    xmlns:resolver="antlib:org.apache.maven.resolver.ant"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <fail message="You need to use Ant of version at least 1.10 to continue.">
        <condition>
            <not>
                <antversion atleast="1.10" />
            </not>
        </condition>
    </fail>

    <property environment="env" />
    <property file="build.properties" />
    <property file="build.properties.default" />
    <property name="debuglevel" value="source,lines,vars" />

    <!-- default version and SCM information -->
    <property name="base.version" value="3.12.0" />
    <property name="base.javaDriverVersion" value="3.11.5.7" />
    <property name="lib.override.com.scylladb.scylla-driver-core" value="" />
    <property name="scm.connection" value="scm:https://gitbox.apache.org/repos/asf/cassandra.git" />
    <property name="scm.developerConnection"
        value="scm:https://gitbox.apache.org/repos/asf/cassandra.git" />
    <property name="scm.url" value="https://gitbox.apache.org/repos/asf?p=cassandra.git;a=tree" />

    <!-- directory details -->
    <property name="basedir" value="." />
    <property name="build.src" value="${basedir}/src" />
    <property name="build.src.java" value="${basedir}/src/java" />
    <property name="build.src.antlr" value="${basedir}/src/antlr" />
    <property name="build.src.resources" value="${basedir}/src/resources" />
    <property name="build.src.gen-java" value="${basedir}/src/gen-java" />
    <property name="build.lib" value="${basedir}/lib" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="build.dir.lib" value="${basedir}/build/lib" />
    <property name="build.test.dir" value="${build.dir}/test" />
    <property name="build.classes" value="${build.dir}/classes" />
    <property name="build.classes.main" value="${build.classes}/main" />
    <property name="build.classes.thrift" value="${build.classes}/thrift" />
    <property name="interface.dir" value="${basedir}/interface" />
    <property name="interface.thrift.dir" value="${interface.dir}/thrift" />
    <property name="interface.thrift.gen-java" value="${interface.thrift.dir}/gen-java" />
    <property name="test.dir" value="${basedir}/test" />
    <property name="test.resources" value="${test.dir}/resources" />
    <property name="test.lib" value="${build.dir}/test/lib" />
    <property name="test.classes" value="${build.dir}/test/classes" />
    <property name="test.conf" value="${test.dir}/conf" />
    <property name="test.data" value="${test.dir}/data" />
    <property name="test.name" value="*Test" />
    <property name="test.classlistfile" value="testlist.txt" />
    <property name="test.classlistprefix" value="unit" />
    <property name="benchmark.name" value="" />
    <property name="test.methods" value="" />
    <property name="test.unit.src" value="${test.dir}/unit" />
    <property name="test.compression_algo" value="LZ4" />
    <property name="dist.dir" value="${build.dir}/dist" />
    <property name="tmp.dir" value="${java.io.tmpdir}" />

    <property name="source.version" value="11" />
    <property name="target.version" value="11" />
    <property name="release.version" value="11" />

    <condition property="version" value="${base.version}">
        <isset property="release" />
    </condition>
    <property name="version" value="${base.version}-SNAPSHOT" />
    <property name="version.properties.dir"
        value="${build.src.resources}/org/apache/cassandra/config/" />
    <property name="final.name" value="${ant.project.name}" />

    <property name="local.repository" value="${user.home}/.m2/repository" />

    <property name="maven-ant-tasks.version" value="2.1.3" />
    <property name="maven-ant-tasks.local"
        value="${local.repository}/org/apache/maven/maven-ant-tasks" />
    <property name="maven-ant-tasks.url"
        value="https://repo.maven.apache.org/maven2/org/apache/maven/maven-ant-tasks" />
    <!-- details of how and which Maven repository we publish to -->
    <property name="maven.version" value="3.0.3" />
    <condition property="maven-repository-url"
        value="https://repository.apache.org/service/local/staging/deploy/maven2">
        <isset property="release" />
    </condition>
    <condition property="maven-repository-id" value="apache.releases.https">
        <isset property="release" />
    </condition>
    <property name="maven-repository-url"
        value="https://repository.apache.org/content/repositories/snapshots" />
    <property name="maven-repository-id" value="apache.snapshots.https" />

    <property name="test.timeout" value="240000" />
    <property name="test.long.timeout" value="600000" />
    <property name="test.burn.timeout" value="60000000" />
    <property name="test.distributed.timeout" value="360000" />

    <!-- default for cql tests. Can be override by -Dcassandra.test.use_prepared=false -->
    <property name="cassandra.test.use_prepared" value="true" />

    <!-- skip flushing schema tables during tests -->
    <property name="cassandra.test.flush_local_schema_changes" value="false" />

    <property name="bytebuddy.version" value="1.10.10" />

    <property name="byteman.version" value="4.0.2" />
    <property name="jamm.version" value="0.3.2" />
    <property name="ecj.version" value="4.6.1" />
    <property name="ohc.version" value="0.5.1" />
    <property name="asm.version" value="6.2" />
    <property name="ecj.version" value="4.4.2" />
    <property name="asm.version" value="5.0.4" />

    <!-- https://mvnrepository.com/artifact/net.openhft/chronicle-bom/1.16.23 -->
    <property name="chronicle-queue.version" value="4.16.3" />
    <property name="chronicle-core.version" value="1.16.3-SNAPSHOT" />
    <property name="chronicle-bytes.version" value="1.16.3" />
    <property name="chronicle-wire.version" value="1.16.1" />
    <property name="chronicle-threads.version" value="1.16.0" />

    <condition property="maven-ant-tasks.jar.exists">
        <available file="${build.dir}/maven-ant-tasks-${maven-ant-tasks.version}.jar" />
    </condition>

    <condition property="maven-ant-tasks.jar.local">
        <available
            file="${maven-ant-tasks.local}/${maven-ant-tasks.version}/maven-ant-tasks-${maven-ant-tasks.version}.jar" />
    </condition>

    <condition property="is.source.artifact">
        <available file="${build.src.java}" type="dir" />
    </condition>

    <condition property="scylla-driver-core.override.done">
        <available file="${scylla-driver-core.override.done.flag.path}" />
    </condition>

    <condition property="scylla-driver-core.override.want">
        <and>
            <not>
                <equals arg1="${lib.override.com.scylladb.scylla-driver-core}" arg2="" />
            </not>
            <available file="${lib.override.com.scylladb.scylla-driver-core}" />
        </and>
    </condition>

    <property name="java11-jvmargs"
        value="--add-exports java.sql/java.sql=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/jdk.internal.module=ALL-UNNAMED --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports java.management.rmi/com.sun.jmx.remote.internal.rmi=ALL-UNNAMED --add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED --add-exports java.rmi/sun.rmi.server=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED" />

    <path id="maven-ant-tasks.classpath"
        path="${build.dir}/maven-ant-tasks-${maven-ant-tasks.version}.jar" />
    <path id="scylla-driver-core.classpath"
        path="${build.dir}/scylla-driver-core-${base.javaDriverVersion}-shaded.jar" />
    <path id="cassandra-stress.classpath">
        <pathelement location="${build.classes.main}" />
        <pathelement location="${build.classes.thrift}" />
        <fileset dir="${build.dir.lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <path id="cassandra-stress.classpath.test">
        <file file="${build.dir}/cassandra-stress.jar" /> <!-- we need the jar for tests and
        benchmarks
        (multi-version jar) -->
        <fileset dir="${build.dir.lib}">
            <include name="**/*.jar" />
            <exclude name="**/*-sources.jar" />
            <exclude name="**/ant-*.jar" />
        </fileset>
        <fileset dir="${test.lib}/jars">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!--
        Setup the output directories.
    -->

    <!-- details of what version of Resolver ANT Tasks to fetch -->
    <property name="resolver-ant-tasks.version" value="1.3.0" />
    <property name="resolver-ant-tasks.local"
        value="${local.repository}/org/apache/maven/resolver/maven-resolver-ant-tasks/${resolver-ant-tasks.version}/maven-resolver-ant-tasks-${resolver-ant-tasks.version}.jar" />
    <property name="resolver-ant-tasks.url"
        value="https://repo1.maven.org/maven2/org/apache/maven/resolver/maven-resolver-ant-tasks" />

    <!-- version of lib/ downloads -->
    <property name="lib.download.sha" value="27de93ebb1285e731570eb8585d66832c79c4289" />

    <condition property="resolver-ant-tasks.jar.exists">
        <available file="${resolver-ant-tasks.local}" />
    </condition>

    <path id="resolver-ant-tasks.classpath" path="${resolver-ant-tasks.local}" />

    <!--
       Fetch Resolver Ant Tasks and Cassandra's dependencies.
    -->

    <target name="_resolver_download" unless="resolver-ant-tasks.jar.exists"
        description="Fetch Resolver ANT Tasks from Maven Central Repository">
        <echo>Downloading Resolver ANT Tasks...</echo>
        <mkdir
            dir="${local.repository}/org/apache/maven/resolver/maven-resolver-ant-tasks/${resolver-ant-tasks.version}" />

        <get
            src="${resolver-ant-tasks.url}/${resolver-ant-tasks.version}/maven-resolver-ant-tasks-${resolver-ant-tasks.version}-uber.jar"
            dest="${resolver-ant-tasks.local}" usetimestamp="true" quiet="true" />
    </target>

    <target name="resolver-init" depends="init,_resolver_download"
        unless="resolver-ant-tasks.initialized"
        description="Initialize Resolver ANT Tasks">

        <typedef uri="antlib:org.apache.maven.resolver.ant"
            resource="org/apache/maven/resolver/ant/antlib.xml"
            classpathref="resolver-ant-tasks.classpath" />
        <resolver:remoterepos id="all">
            <remoterepo id="resolver-central" url="${artifact.remoteRepository.central}" />
            <remoterepo id="resolver-apache" url="${artifact.remoteRepository.apache}" />
        </resolver:remoterepos>

        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies>
                <dependency groupId="com.datastax.wikitext" artifactId="wikitext-core-ant"
                    version="1.3" />
                <dependency groupId="org.fusesource.wikitext" artifactId="textile-core"
                    version="1.3" />
            </dependencies>
            <path refid="wikitext.classpath" classpath="runtime" />
        </resolver:resolve>
        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies>
                <dependency groupId="org.apache.rat" artifactId="apache-rat-tasks" version="0.6" />
            </dependencies>
            <path refid="rat.classpath" classpath="runtime" />
        </resolver:resolve>
        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies>
                <dependency groupId="org.antlr" artifactId="antlr" version="3.5.2" />
                <dependency groupId="org.antlr" artifactId="antlr-runtime" version="3.5.2" />
                <dependency groupId="org.antlr" artifactId="ST4" version="4.0.8" />
            </dependencies>
            <path refid="cql3-grammar.classpath" classpath="runtime" />
        </resolver:resolve>
        <macrodef name="install">
            <attribute name="pomFile" />
            <attribute name="file" />
            <attribute name="classifier" default="" />
            <attribute name="packaging" default="jar" />
            <sequential>
                <exec dir="." executable="sh">
                    <arg
                        line="-c 'mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file -DpomFile=@{pomFile} -Dfile=@{file} -Dclassifier=@{classifier} -Dpackaging=@{packaging}'" />
                </exec>
            </sequential>
        </macrodef>

        <macrodef name="deploy">
            <attribute name="pomFile" />
            <attribute name="file" />
            <attribute name="classifier" default="" />
            <attribute name="packaging" default="jar" />
            <sequential>
                <exec dir="." executable="sh">
                    <arg
                        line="-c 'mvn org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file -DretryFailedDeploymentCount=5 -Durl=${maven-repository-url} -DrepositoryId=${maven-repository-id} -DpomFile=@{pomFile} -Dfile=@{file} -Dclassifier=@{classifier} -Dpackaging=@{packaging}'" />
                </exec>
            </sequential>
        </macrodef>

        <macrodef name="sign-dist">
            <attribute name="file" />
            <sequential>
                <echo message="gpg signing @{file}" />
                <exec dir="." executable="sh">
                    <!-- dummy out the deploy parameters, only the signing is required here -->
                    <arg
                        line="-c 'mvn -q org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file -Dfile=@{file} -DgroupId=org.apache.cassandra -DartifactId=cassandra-parent -Dversion=${version} -Durl=file:///tmp/ -DrepositoryId=tmp'" />
                </exec>
            </sequential>
        </macrodef>

        <property name="resolver-ant-tasks.initialized" value="true" />
    </target>

    <target name="resolver-retrieve-build" depends="resolver-init,write-poms">
        <resolver:pom file="${build.dir}/cassandra-stress.pom" id="all-pom" />
        <resolver:pom file="${build.dir}/${ant.project.name}-thrift-${version}.pom" id="thrift-pom" />
        <resolver:pom file="${build.dir}/tmp-cassandra-stress-deps.pom" id="pom-deps" />

        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies pomRef="thrift-pom" />
            <files dir="${build.dir.lib}/jars"
                layout="{artifactId}-{version}-{classifier}.{extension}"
                scopes="compile,provided,!system" />
        </resolver:resolve>
        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies pomRef="all-pom" />
            <files dir="${build.dir.lib}/jars"
                layout="{artifactId}-{version}-{classifier}.{extension}"
                scopes="compile,provided,!system" />
        </resolver:resolve>
        <resolver:resolve>
            <remoterepos refid="all" />
            <dependencies pomRef="pom-deps" />
            <files dir="${test.lib}/jars" layout="{artifactId}-{version}-{classifier}.{extension}"
                scopes="test,!provide,!system" />
        </resolver:resolve>

    </target>

    <target name="resolver-dist-lib" depends="resolver-retrieve-build,write-poms">
        <resolver:pom file="${build.dir}/cassandra-stress.pom" id="all-pom" />

        <resolver:resolve failOnMissingAttachments="true">
            <remoterepos refid="all" />
            <dependencies pomRef="all-pom" />
            <files dir="${build.lib}" layout="{artifactId}-{version}-{classifier}.{extension}"
                scopes="compile,!provide,!system" />
        </resolver:resolve>
        <resolver:resolve failOnMissingAttachments="true">
            <remoterepos refid="all" />
            <dependencies pomRef="thrift-pom" />
            <files dir="${build.lib}" layout="{artifactId}-{version}-{classifier}.{extension}"
                scopes="compile,!provide,!system" />
        </resolver:resolve>
        <mkdir dir="${local.repository}/org/apache/cassandra/deps/sigar-bin" />
        <mkdir dir="${build.lib}/sigar-bin" />


        <!-- apache/cassandra/lib -->
        <get dest="${local.repository}/org/apache/cassandra/deps/sigar-bin/" quiet="true"
            usetimestamp="true"
            skipexisting="true">
            <url
                url="https://raw.githubusercontent.com/apache/cassandra/${lib.download.sha}/lib/sigar-bin/libsigar-amd64-linux.so" />
        </get>

        <copy todir="${build.lib}/sigar-bin/" quiet="true">
            <file
                file="${local.repository}/org/apache/cassandra/deps/sigar-bin/libsigar-amd64-linux.so" />
        </copy>
    </target>

    <target name="init">
        <fail unless="is.source.artifact"
            message="Not a source artifact, stopping here." />
        <mkdir dir="${build.classes.main}" />
        <mkdir dir="${build.classes.thrift}" />
        <mkdir dir="${test.lib}" />
        <mkdir dir="${test.classes}" />
        <mkdir dir="${build.src.gen-java}" />
        <mkdir dir="${build.dir.lib}" />
    </target>

    <target name="clean" description="Remove all locally created artifacts">
        <delete dir="${build.test.dir}" />
        <delete dir="${build.classes}" />
        <delete dir="${build.src.gen-java}" />
        <delete dir="${version.properties.dir}" />
    </target>
    <target depends="clean" name="cleanall" />

    <target name="realclean" depends="clean"
        description="Remove the entire build directory and all downloaded artifacts">
        <delete dir="${build.lib}" />
        <delete dir="${build.dir}" />
    </target>

    <!--
       This generates the CQL grammar files from Cql.g
    -->
    <target name="check-gen-cql3-grammar">
        <uptodate property="cql3current"
            targetfile="${build.src.gen-java}/org/apache/cassandra/cql3/Cql.tokens">
            <srcfiles dir="${build.src.antlr}">
                <include name="*.g" />
            </srcfiles>
        </uptodate>
    </target>

    <target name="gen-cql3-grammar" depends="check-gen-cql3-grammar" unless="cql3current">
        <echo>Building Grammar ${build.src.antlr}/Cql.g ...</echo>
        <java classname="org.antlr.Tool"
            classpathref="cql3-grammar.classpath"
            fork="true"
            failonerror="true">
            <arg value="-Xconversiontimeout" />
            <arg value="10000" />
            <arg value="${build.src.antlr}/Cql.g" />
            <arg value="-fo" />
            <arg value="${build.src.gen-java}/org/apache/cassandra/cql3/" />
            <arg value="-Xmaxinlinedfastates" />
            <arg value="10" /> <!-- default is 60 -->
        </java>
    </target>
    <!--
       Fetch Maven Ant Tasks and Cassandra's dependencies
       These targets are intentionally free of dependencies so that they
       can be run stand-alone from a binary release artifact.
    -->
    <target name="maven-ant-tasks-localrepo" unless="maven-ant-tasks.jar.exists"
        if="maven-ant-tasks.jar.local"
        depends="init" description="Fetch Maven ANT Tasks from Maven Local Repository">
        <copy
            file="${maven-ant-tasks.local}/${maven-ant-tasks.version}/maven-ant-tasks-${maven-ant-tasks.version}.jar"
            tofile="${build.dir}/maven-ant-tasks-${maven-ant-tasks.version}.jar" />
        <property name="maven-ant-tasks.jar.exists" value="true" />
    </target>

    <target name="maven-ant-tasks-download" depends="init,maven-ant-tasks-localrepo"
        unless="maven-ant-tasks.jar.exists"
        description="Fetch Maven ANT Tasks from Maven Central Repositroy">
        <echo>Downloading Maven ANT Tasks...</echo>
        <get
            src="${maven-ant-tasks.url}/${maven-ant-tasks.version}/maven-ant-tasks-${maven-ant-tasks.version}.jar"
            dest="${build.dir}/maven-ant-tasks-${maven-ant-tasks.version}.jar" usetimestamp="true" />
        <copy file="${build.dir}/maven-ant-tasks-${maven-ant-tasks.version}.jar"
            tofile="${maven-ant-tasks.local}/${maven-ant-tasks.version}/maven-ant-tasks-${maven-ant-tasks.version}.jar" />
    </target>

    <target name="maven-ant-tasks-init" depends="maven-ant-tasks-download,resolver-init"
        unless="maven-ant-tasks.initialized"
        description="Initialize Maven ANT Tasks">
        <typedef uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
        <property name="maven-ant-tasks.initialized" value="true" />
    </target>

    <target name="scylla-driver-core.override.install" if="scylla-driver-core.override.want"
        depends="init" description="Fetch Scylla Driver Core from Maven Local Repository">
        <echo>Use local Scylla Driver Core library ${lib.override.com.scylladb.scylla-driver-core}</echo>
        <copy file="${lib.override.com.scylladb.scylla-driver-core}"
            tofile="${scylla-driver-core.build.path}" />
        <copy file="${lib.override.com.scylladb.scylla-driver-core}"
            tofile="${scylla-driver-core.repo-cache.path}" />
        <touch file="${scylla-driver-core.override.done.flag.path}" />
    </target>

    <target name="scylla-driver-core.override.cleanup"
        unless="scylla-driver-core.override.want, scylla-driver-core.override.done"
        depends="init" description="Remove Scylla Driver Core from Maven From Local Repository">
        <delete quiet="true" failonerror="false" file="${scylla-driver-core.build.path}" />
        <delete quiet="true" failonerror="false" file="${scylla-driver-core.repo-cache.path}/" />
        <delete quiet="true" failonerror="false"
            file="${scylla-driver-core.override.done.flag.path}" />
    </target>

    <target name="scylla-driver-core.override"
        depends="init,scylla-driver-core.override.install,scylla-driver-core.override.cleanup" />

    <!-- this task defines the dependencies that will be fetched by Maven ANT Tasks
         the dependencies are re-used for publishing artifacts to Maven Central
         in order to keep everything consistent -->
    <target name="maven-declare-dependencies"
        depends="maven-ant-tasks-init, scylla-driver-core.override"
        description="Define dependencies and dependency versions">
        <!-- The parent pom defines the versions of all dependencies -->
        <artifact:pom id="parent-pom"
            groupId="org.apache.cassandra"
            artifactId="cassandra-parent"
            packaging="pom"
            version="${version}"
            url="https://cassandra.apache.org"
            name="Apache Cassandra"
            inceptionYear="2009"
            description="The Apache Cassandra Project develops a highly scalable second-generation distributed database, bringing together Dynamo's fully distributed design and Bigtable's ColumnFamily-based data model.">

            <!-- Inherit from the ASF template pom file, ref http://maven.apache.org/pom/asf/ -->
            <parent groupId="org.apache" artifactId="apache" version="22" />
            <license name="The Apache Software License, Version 2.0"
                url="https://www.apache.org/licenses/LICENSE-2.0.txt" />
            <scm connection="${scm.connection}" developerConnection="${scm.developerConnection}"
                url="${scm.url}" />
            <dependencyManagement>
                <dependency groupId="org.xerial.snappy" artifactId="snappy-java" version="1.1.10.4" />
                <dependency groupId="net.jpountz.lz4" artifactId="lz4" version="1.3.0" />
                <dependency groupId="com.ning" artifactId="compress-lzf" version="0.8.4" />
                <dependency groupId="com.google.guava" artifactId="guava" version="32.1.3-jre">
                    <exclusion groupId="com.google.code.findbugs" artifactId="jsr305" />
                    <exclusion groupId="org.codehaus.mojo" artifactId="animal-sniffer-annotations" />
                    <exclusion groupId="com.google.guava" artifactId="listenablefuture" />
                    <exclusion groupId="org.checkerframework" artifactId="checker-qual" />
                    <exclusion groupId="com.google.errorprone" artifactId="error_prone_annotations" />
                </dependency>
                <dependency groupId="com.github.luben" artifactId="zstd-jni" version="1.3.8-5" />
                <dependency groupId="org.hdrhistogram" artifactId="HdrHistogram" version="2.1.12" />
                <dependency groupId="commons-cli" artifactId="commons-cli" version="1.1" />
                <dependency groupId="commons-codec" artifactId="commons-codec" version="1.9" />
                <dependency groupId="commons-io" artifactId="commons-io" version="2.6" scope="test" />
                <dependency groupId="org.apache.commons" artifactId="commons-lang3" version="3.1" />
                <dependency groupId="org.apache.commons" artifactId="commons-math3" version="3.2" />
                <dependency groupId="com.googlecode.concurrentlinkedhashmap"
                    artifactId="concurrentlinkedhashmap-lru"
                    version="1.4" />
                <dependency groupId="org.antlr" artifactId="antlr" version="3.5.2">
                    <exclusion groupId="org.antlr" artifactId="stringtemplate" />
                </dependency>
                <dependency groupId="org.antlr" artifactId="ST4" version="4.0.8" />
                <dependency groupId="org.antlr" artifactId="antlr-runtime" version="3.5.2">
                    <exclusion groupId="org.antlr" artifactId="stringtemplate" />
                </dependency>
                <dependency groupId="org.slf4j" artifactId="slf4j-api" version="1.7.25" />
                <dependency groupId="org.slf4j" artifactId="log4j-over-slf4j" version="1.7.25" />
                <dependency groupId="org.slf4j" artifactId="jcl-over-slf4j" version="1.7.25" />
                <dependency groupId="ch.qos.logback" artifactId="logback-core" version="1.2.13" />
                <dependency groupId="ch.qos.logback" artifactId="logback-classic" version="1.2.13" />
                <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-core"
                    version="2.15.2" />
                <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-databind"
                    version="2.15.2" />
                <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-annotations"
                    version="2.15.2" />
                <dependency groupId="com.googlecode.json-simple" artifactId="json-simple"
                    version="1.1" />
                <dependency groupId="com.boundary" artifactId="high-scale-lib" version="1.0.6" />
                <dependency groupId="com.github.jbellis" artifactId="jamm" version="${jamm.version}" />
                <dependency groupId="com.thinkaurelius.thrift" artifactId="thrift-server"
                    version="0.3.7">
                    <exclusion groupId="org.slf4j" artifactId="slf4j-log4j12" />
                    <exclusion groupId="junit" artifactId="junit" />
                </dependency>
                <dependency groupId="org.yaml" artifactId="snakeyaml" version="2.0" />
                <dependency groupId="org.apache.thrift" artifactId="libthrift" version="0.15.0">
                    <exclusion groupId="commons-logging" artifactId="commons-logging" />
                    <exclusion groupId="org.apache.httpcomponents" artifactId="httpclient" />
                    <exclusion groupId="org.apache.httpcomponents" artifactId="httpcore" />
                </dependency>
                <dependency groupId="junit" artifactId="junit" version="4.12" scope="test">
                    <exclusion groupId="org.hamcrest" artifactId="hamcrest-core" />
                </dependency>
                <dependency groupId="org.mockito" artifactId="mockito-core" version="3.2.4"
                    scope="test" />
                <dependency groupId="org.apache.cassandra" artifactId="dtest-api" version="0.0.13"
                    scope="test" />
                <dependency groupId="org.reflections" artifactId="reflections" version="0.9.12"
                    scope="test" />
                <dependency groupId="org.quicktheories" artifactId="quicktheories" version="0.25"
                    scope="test" />
                <dependency groupId="org.apache.hadoop" artifactId="hadoop-core" version="1.0.3"
                    scope="provided">
                    <exclusion groupId="org.mortbay.jetty" artifactId="servlet-api" />
                    <exclusion groupId="commons-logging" artifactId="commons-logging" />
                    <exclusion groupId="org.eclipse.jdt" artifactId="core" />
                    <exclusion groupId="ant" artifactId="ant" />
                    <exclusion groupId="junit" artifactId="junit" />
                    <exclusion groupId="org.codehaus.jackson" artifactId="jackson-mapper-asl" />
                    <exclusion groupId="org.slf4j" artifactId="slf4j-api" />
                </dependency>
                <dependency groupId="org.apache.hadoop" artifactId="hadoop-minicluster"
                    version="1.0.3"
                    scope="provided">
                    <exclusion groupId="asm" artifactId="asm" /> <!-- this is the outdated version
                    3.1 -->
                    <exclusion groupId="org.codehaus.jackson" artifactId="jackson-mapper-asl" />
                </dependency>
                <dependency groupId="net.java.dev.jna" artifactId="jna" version="5.14.0" />

                <dependency groupId="org.jboss.byteman" artifactId="byteman-install"
                    version="${byteman.version}" />
                <dependency groupId="org.jboss.byteman" artifactId="byteman"
                    version="${byteman.version}" />
                <dependency groupId="org.jboss.byteman" artifactId="byteman-submit"
                    version="${byteman.version}" />
                <dependency groupId="org.jboss.byteman" artifactId="byteman-bmunit"
                    version="${byteman.version}" />

                <dependency groupId="net.bytebuddy" artifactId="byte-buddy"
                    version="${bytebuddy.version}" />
                <dependency groupId="net.bytebuddy" artifactId="byte-buddy-agent"
                    version="${bytebuddy.version}" />

                <dependency groupId="org.openjdk.jmh" artifactId="jmh-core" version="1.21"
                    scope="test" />
                <dependency groupId="org.openjdk.jmh" artifactId="jmh-generator-annprocess"
                    version="1.21"
                    scope="test" />

                <dependency groupId="org.apache.ant" artifactId="ant-junit" version="1.9.7"
                    scope="test" />

                <dependency groupId="org.apache.cassandra" artifactId="cassandra-all"
                    version="${version}" />
                <!--dependency
                groupId="org.apache.cassandra" artifactId="cassandra-thrift" version="${version}"
                scope="provided"/-->
                <dependency groupId="io.dropwizard.metrics" artifactId="metrics-core"
                    version="3.1.5" />
                <dependency groupId="io.dropwizard.metrics" artifactId="metrics-jvm" version="3.1.5" />
                <dependency groupId="io.dropwizard.metrics" artifactId="metrics-logback"
                    version="3.1.5" />
                <dependency groupId="com.addthis.metrics" artifactId="reporter-config3"
                    version="3.0.3">
                    <exclusion groupId="org.hibernate" artifactId="hibernate-validator" />
                </dependency>
                <dependency groupId="org.mindrot" artifactId="jbcrypt" version="0.4" />
                <dependency groupId="io.airlift" artifactId="airline" version="0.9">
                    <exclusion groupId="com.google.code.findbugs" artifactId="jsr305" />
                </dependency>
                <dependency groupId="io.netty" artifactId="netty-bom" version="4.1.100.Final"
                    type="pom"
                    scope="provided" />
                <dependency groupId="io.netty" artifactId="netty-all" version="4.1.100.Final" />
                <dependency groupId="com.google.code.findbugs" artifactId="jsr305" version="2.0.2"
                    scope="provided" />
                <dependency groupId="com.clearspring.analytics" artifactId="stream" version="2.5.2">
                    <exclusion groupId="it.unimi.dsi" artifactId="fastutil" />
                </dependency>
                <dependency groupId="com.scylladb" artifactId="scylla-driver-core"
                    version="${base.javaDriverVersion}"
                    classifier="shaded" />
                <!-- UPDATE AND UNCOMMENT ON THE DRIVER RELEASE, BEFORE 4.0 RELEASE
                    <dependency groupId="com.datastax.cassandra" artifactId="cassandra-driver-core" version="3.0.1"
                classifier="shaded">
                      <exclusion groupId="io.netty" artifactId="netty-buffer"/>
                      <exclusion groupId="io.netty" artifactId="netty-codec"/>
                      <exclusion groupId="io.netty" artifactId="netty-handler"/>
                      <exclusion groupId="io.netty" artifactId="netty-transport"/>
                      <exclusion groupId="com.github.jnr" artifactId="jnr-ffi"/>
                      <exclusion groupId="com.github.jnr" artifactId="jnr-posix"/>
                      <exclusion groupId="org.slf4j" artifactId="slf4j-api"/>
                    </dependency>
                -->
                <dependency groupId="org.eclipse.jdt.core.compiler" artifactId="ecj"
                    version="${ecj.version}" />
                <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core"
                    version="${ohc.version}">
                    <exclusion groupId="org.slf4j" artifactId="slf4j-api" />
                </dependency>
                <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core-j8"
                    version="${ohc.version}" />
                <dependency groupId="net.ju-n.compile-command-annotations"
                    artifactId="compile-command-annotations"
                    version="1.2.0" scope="provided" />
                <dependency groupId="org.fusesource" artifactId="sigar" version="1.6.4">
                    <exclusion groupId="log4j" artifactId="log4j" />
                </dependency>
                <dependency groupId="joda-time" artifactId="joda-time" version="2.4" />
                <dependency groupId="com.carrotsearch" artifactId="hppc" version="0.5.4" />
                <dependency groupId="com.github.rholder" artifactId="snowball-stemmer"
                    version="1.3.0.581.1" />
                <dependency groupId="com.googlecode.concurrent-trees" artifactId="concurrent-trees"
                    version="2.4.0" />
                <dependency groupId="com.github.ben-manes.caffeine" artifactId="caffeine"
                    version="2.2.6" />
                <dependency groupId="org.jctools" artifactId="jctools-core" version="1.2.1" />
                <dependency groupId="org.ow2.asm" artifactId="asm" version="${asm.version}" />
                <dependency groupId="org.ow2.asm" artifactId="asm-tree" version="${asm.version}"
                    scope="test" />
                <dependency groupId="org.ow2.asm" artifactId="asm-commons" version="${asm.version}"
                    scope="test" />
                <dependency groupId="javax.inject" artifactId="javax.inject" version="1" />
                <dependency groupId="com.google.j2objc" artifactId="j2objc-annotations"
                    version="1.3" scope="provided" />
                <dependency groupId="org.junit" artifactId="junit-bom" version="5.6.0" type="pom"
                    scope="test" />
                <!-- when updating assertj, make sure to also update the corresponding junit-bom
                dependency -->
                <dependency groupId="org.assertj" artifactId="assertj-core" version="3.15.0"
                    scope="test" />
                <dependency groupId="org.hamcrest" artifactId="hamcrest" version="2.2" scope="test" />
            </dependencyManagement>
            <developer id="adelapena" name="Andres de la Peña" />
            <developer id="alakshman" name="Avinash Lakshman" />
            <developer id="aleksey" name="Aleksey Yeschenko" />
            <developer id="amorton" name="Aaron Morton" />
            <developer id="aweisberg" name="Ariel Weisberg" />
            <developer id="bdeggleston" name="Blake Eggleston" />
            <developer id="benedict" name="Benedict Elliott Smith" />
            <developer id="benjamin" name="Benjamin Lerer" />
            <developer id="blambov" name="Branimir Lambov" />
            <developer id="brandonwilliams" name="Brandon Williams" />
            <developer id="carl" name="Carl Yeksigian" />
            <developer id="dbrosius" name="David Brosiusd" />
            <developer id="dikang" name="Dikang Gu" />
            <developer id="eevans" name="Eric Evans" />
            <developer id="edimitrova" name="Ekaterina Dimitrova" />
            <developer id="gdusbabek" name="Gary Dusbabek" />
            <developer id="goffinet" name="Chris Goffinet" />
            <developer id="ifesdjeen" name="Alex Petrov" />
            <developer id="jaakko" name="Laine Jaakko Olavi" />
            <developer id="jake" name="T Jake Luciani" />
            <developer id="jasonbrown" name="Jason Brown" />
            <developer id="jbellis" name="Jonathan Ellis" />
            <developer id="jfarrell" name="Jake Farrell" />
            <developer id="jjirsa" name="Jeff Jirsa" />
            <developer id="jkni" name="Joel Knighton" />
            <developer id="jmckenzie" name="Josh McKenzie" />
            <developer id="johan" name="Johan Oskarsson" />
            <developer id="junrao" name="Jun Rao" />
            <developer id="jzhuang" name="Jay Zhuang" />
            <developer id="kohlisankalp" name="Sankalp Kohli" />
            <developer id="marcuse" name="Marcus Eriksson" />
            <developer id="mck" name="Michael Semb Wever" />
            <developer id="mishail" name="Mikhail Stepura" />
            <developer id="mshuler" name="Michael Shuler" />
            <developer id="paulo" name="Paulo Motta" />
            <developer id="pmalik" name="Prashant Malik" />
            <developer id="rstupp" name="Robert Stupp" />
            <developer id="scode" name="Peter Schuller" />
            <developer id="beobal" name="Sam Tunnicliffe" />
            <developer id="slebresne" name="Sylvain Lebresne" />
            <developer id="stefania" name="Stefania Alborghetti" />
            <developer id="tylerhobbs" name="Tyler Hobbs" />
            <developer id="vijay" name="Vijay Parthasarathy" />
            <developer id="xedin" name="Pavel Yaskevich" />
            <developer id="yukim" name="Yuki Morishita" />
            <developer id="zznate" name="Nate McCall" />
        </artifact:pom>

        <!-- each dependency set then defines the subset of the dependencies for that dependency set -->
        <artifact:pom id="build-deps-pom"
            artifactId="cassandra-build-deps">
            <parent groupId="org.apache.cassandra"
                artifactId="cassandra-parent"
                version="${version}"
                relativePath="cassandra-stress-parent.pom" />
            <dependency groupId="junit" artifactId="junit" />
            <dependency groupId="commons-io" artifactId="commons-io" />
            <dependency groupId="org.mockito" artifactId="mockito-core" />
            <dependency groupId="org.quicktheories" artifactId="quicktheories" />
            <dependency groupId="org.apache.cassandra" artifactId="dtest-api" />
            <dependency groupId="org.reflections" artifactId="reflections" />
            <dependency groupId="com.google.code.findbugs" artifactId="jsr305" />
            <dependency groupId="org.openjdk.jmh" artifactId="jmh-core" />
            <dependency groupId="org.openjdk.jmh" artifactId="jmh-generator-annprocess" />
            <dependency groupId="net.ju-n.compile-command-annotations"
                artifactId="compile-command-annotations" />
            <dependency groupId="org.apache.ant" artifactId="ant-junit" />
            <!-- adding this dependency is necessary for assertj. When updating assertj, need to
            also update the version of
                 this that the new assertj's `assertj-parent-pom` depends on. -->
            <dependency groupId="org.junit" artifactId="junit-bom" type="pom" />

            <dependency groupId="org.apache.hadoop" artifactId="hadoop-core" />
            <dependency groupId="org.apache.hadoop" artifactId="hadoop-minicluster" />
            <dependency groupId="com.google.code.findbugs" artifactId="jsr305" />
            <dependency groupId="org.antlr" artifactId="antlr" />
            <dependency groupId="com.scylladb" artifactId="scylla-driver-core" classifier="shaded">
                <exclusion groupId="io.netty" artifactId="netty-buffer" />
                <exclusion groupId="io.netty" artifactId="netty-codec" />
                <exclusion groupId="io.netty" artifactId="netty-handler" />
                <exclusion groupId="io.netty" artifactId="netty-transport" />
            </dependency>
            <dependency groupId="org.eclipse.jdt.core.compiler" artifactId="ecj" />
            <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core" version="0.4.4" />
            <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core-j8" version="0.4.4" />
            <dependency groupId="org.openjdk.jmh" artifactId="jmh-core" />
            <dependency groupId="org.openjdk.jmh" artifactId="jmh-generator-annprocess" />
            <dependency groupId="net.ju-n.compile-command-annotations"
                artifactId="compile-command-annotations" />
            <dependency groupId="org.apache.ant" artifactId="ant-junit" version="1.9.7" />
            <dependency groupId="org.hamcrest" artifactId="hamcrest" scope="test" />


            <dependency groupId="org.junit" artifactId="junit-bom" type="pom" scope="test" />
            <dependency groupId="org.assertj" artifactId="assertj-core" scope="test" />

            <dependency groupId="org.jboss.byteman" artifactId="byteman-install" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman-submit" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman-bmunit" scope="provided" />

            <dependency groupId="org.apache.commons" artifactId="commons-lang3" />
        </artifact:pom>

        <!-- now the pom's for artifacts being deployed to Maven Central -->

        <artifact:pom id="all-pom"
            artifactId="cassandra-all"
            url="https://cassandra.apache.org"
            name="Apache Cassandra">
            <parent groupId="org.apache.cassandra"
                artifactId="cassandra-parent"
                version="${version}"
                relativePath="cassandra-stress-parent.pom" />
            <scm connection="${scm.connection}" developerConnection="${scm.developerConnection}"
                url="${scm.url}" />
            <dependency groupId="org.xerial.snappy" artifactId="snappy-java" />
            <dependency groupId="net.jpountz.lz4" artifactId="lz4" />
            <dependency groupId="com.ning" artifactId="compress-lzf" />
            <dependency groupId="com.google.guava" artifactId="guava" />
            <dependency groupId="commons-cli" artifactId="commons-cli" />
            <dependency groupId="commons-codec" artifactId="commons-codec" />
            <dependency groupId="org.apache.commons" artifactId="commons-lang3" />
            <dependency groupId="org.apache.commons" artifactId="commons-math3" />
            <dependency groupId="com.googlecode.concurrentlinkedhashmap"
                artifactId="concurrentlinkedhashmap-lru" />
            <dependency groupId="org.antlr" artifactId="antlr" scope="provided" />
            <dependency groupId="org.antlr" artifactId="ST4" />
            <dependency groupId="org.antlr" artifactId="antlr-runtime" />
            <dependency groupId="org.slf4j" artifactId="slf4j-api" />
            <dependency groupId="org.slf4j" artifactId="log4j-over-slf4j" />
            <dependency groupId="org.slf4j" artifactId="jcl-over-slf4j" />
            <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-core" />
            <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-databind" />
            <dependency groupId="com.fasterxml.jackson.core" artifactId="jackson-annotations" />
            <dependency groupId="com.googlecode.json-simple" artifactId="json-simple" />
            <dependency groupId="com.boundary" artifactId="high-scale-lib" />
            <dependency groupId="org.yaml" artifactId="snakeyaml" />
            <dependency groupId="org.mindrot" artifactId="jbcrypt" />
            <dependency groupId="io.airlift" artifactId="airline" />
            <dependency groupId="io.dropwizard.metrics" artifactId="metrics-core" />
            <dependency groupId="io.dropwizard.metrics" artifactId="metrics-jvm" />
            <dependency groupId="io.dropwizard.metrics" artifactId="metrics-logback" />
            <dependency groupId="com.addthis.metrics" artifactId="reporter-config3" />
            <dependency groupId="com.thinkaurelius.thrift" artifactId="thrift-server" />
            <dependency groupId="com.clearspring.analytics" artifactId="stream" />

            <dependency groupId="ch.qos.logback" artifactId="logback-core" />
            <dependency groupId="ch.qos.logback" artifactId="logback-classic" />

            <dependency groupId="org.apache.thrift" artifactId="libthrift" />
            <!--dependency
            groupId="org.apache.cassandra" artifactId="cassandra-thrift" /-->

            <!-- don't need hadoop classes to run, but if you use the hadoop stuff -->
            <dependency groupId="org.apache.hadoop" artifactId="hadoop-core" optional="true"
                scope="provided" />
            <dependency groupId="org.apache.hadoop" artifactId="hadoop-minicluster" optional="true"
                scope="provided" />

            <!-- don't need the Java Driver to run, but if you use the hadoop stuff or UDFs -->
            <dependency groupId="com.scylladb" artifactId="scylla-driver-core" classifier="shaded"
                optional="true">
                <exclusion groupId="io.netty" artifactId="netty-buffer" />
                <exclusion groupId="io.netty" artifactId="netty-codec" />
                <exclusion groupId="io.netty" artifactId="netty-handler" />
                <exclusion groupId="io.netty" artifactId="netty-transport" />
            </dependency>

            <!-- don't need jna to run, but nice to have -->
            <dependency groupId="net.java.dev.jna" artifactId="jna" />

            <!-- don't need jamm unless running a server in which case it needs to be a -javagent to
            be used anyway -->
            <dependency groupId="com.github.jbellis" artifactId="jamm" />

            <dependency groupId="io.netty" artifactId="netty-all" />
            <dependency groupId="joda-time" artifactId="joda-time" />
            <dependency groupId="org.fusesource" artifactId="sigar" />
            <dependency groupId="org.eclipse.jdt.core.compiler" artifactId="ecj" />
            <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core" />
            <dependency groupId="org.caffinitas.ohc" artifactId="ohc-core-j8" />
            <dependency groupId="com.github.ben-manes.caffeine" artifactId="caffeine" />
            <dependency groupId="org.jctools" artifactId="jctools-core" />
            <dependency groupId="org.ow2.asm" artifactId="asm" />
            <dependency groupId="javax.inject" artifactId="javax.inject" />
            <dependency groupId="com.google.j2objc" artifactId="j2objc-annotations" />
            <dependency groupId="org.hdrhistogram" artifactId="HdrHistogram" />

            <dependency groupId="com.github.luben" artifactId="zstd-jni" />
            <dependency groupId="com.github.rholder" artifactId="snowball-stemmer" />
            <dependency groupId="com.googlecode.concurrent-trees" artifactId="concurrent-trees" />

            <!-- compile tools -->
            <dependency groupId="com.google.code.findbugs" artifactId="jsr305" scope="provided" />
            <dependency groupId="net.ju-n.compile-command-annotations"
                artifactId="compile-command-annotations"
                scope="provided" />
            <dependency groupId="org.assertj" artifactId="assertj-core" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman-install" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman-submit" scope="provided" />
            <dependency groupId="org.jboss.byteman" artifactId="byteman-bmunit" scope="provided" />
        </artifact:pom>
        <artifact:pom id="thrift-pom"
            artifactId="cassandra-thrift"
            url="https://cassandra.apache.org"
            name="Apache Cassandra">
            <parent groupId="org.apache.cassandra"
                artifactId="cassandra-parent"
                version="${version}"
                relativePath="cassandra-stress-parent.pom" />
            <scm connection="${scm.connection}" developerConnection="${scm.developerConnection}"
                url="${scm.url}" />
            <dependency groupId="org.apache.commons" artifactId="commons-lang3" />
            <dependency groupId="org.slf4j" artifactId="slf4j-api" />
            <dependency groupId="org.slf4j" artifactId="log4j-over-slf4j" />
            <dependency groupId="org.slf4j" artifactId="jcl-over-slf4j" />
            <dependency groupId="org.apache.thrift" artifactId="libthrift" />
            <dependency groupId="com.carrotsearch" artifactId="hppc" />
        </artifact:pom>
    </target>

    <!-- deprecated: legacy compatibility for build scripts in other repositories -->
    <target name="maven-ant-tasks-retrieve-build" depends="resolver-retrieve-build" />

    <target name="echo-base-version">
        <echo message="${base.version}" />
    </target>

    <!--
       Generate thrift code.  We have targets to build java because
       Cassandra depends on it, and python because that is what the system
       tests run.
    -->
    <target name="check-gen-thrift-java">
        <uptodate property="thriftUpToDate" srcfile="${interface.dir}/cassandra.thrift"
            targetfile="${interface.thrift.gen-java}/org/apache/cassandra/thrift/Cassandra.java" />
    </target>
    <target name="gen-thrift-java" unless="thriftUpToDate" depends="check-gen-thrift-java"
        description="Generate Thrift Java artifacts">
        <echo>Generating Thrift Java code from ${basedir}/interface/cassandra.thrift...</echo>
        <exec executable="thrift" dir="${basedir}/interface" failonerror="true">
            <arg line="--gen java" />
            <arg line="-o ${interface.thrift.dir}" />
            <arg line="cassandra.thrift" />
        </exec>
        <antcall target="write-java-license-headers" />
    </target>

    <target name="gen-thrift-py" description="Generate Thrift Python artifacts">
        <echo>Generating Thrift Python code from ${basedir}/interface/cassandra.thrift...</echo>
        <exec executable="thrift" dir="${basedir}/interface" failonerror="true">
            <arg line="--gen py" />
            <arg line="-o ${interface.thrift.dir}" />
            <arg line="cassandra.thrift" />
        </exec>
        <exec executable="thrift" dir="${basedir}/interface" failonerror="true">
            <arg line="--gen py:twisted" />
            <arg line="-o ${interface.thrift.dir}" />
            <arg line="cassandra.thrift" />
        </exec>
    </target>

    <!-- create properties file with C version -->
    <target name="createVersionPropFile">
        <taskdef name="propertyfile" classname="org.apache.tools.ant.taskdefs.optional.PropertyFile" />
        <mkdir dir="${version.properties.dir}" />
        <propertyfile file="${version.properties.dir}/version.properties">
            <entry key="CassandraVersion" value="${version}" />
            <entry key="JavaDriverVersion" value="${base.javaDriverVersion}" />
        </propertyfile>
    </target>

    <target name="test-run" depends="jar"
        description="Run in test mode.  Not for production use!">
        <java classname="org.apache.cassandra.service.CassandraDaemon" fork="true">
            <classpath>
                <path refid="cassandra-stress.classpath.test" />
                <pathelement location="${test.conf}" />
            </classpath>
            <jvmarg value="-Dstorage-config=${test.conf}" />
            <jvmarg value="-javaagent:${build.lib}/jamm-${jamm.version}.jar" />
            <jvmarg value="-ea" />
            <jvmarg line="${java11-jvmargs}" />
        </java>
    </target>

    <!-- Run tests and reports errors and generates a junit report after -->
    <macrodef name="testmacro">
        <attribute name="inputdir" />
        <attribute name="timeout" default="${test.timeout}" />
        <attribute name="forkmode" default="perTest" />
        <attribute name="showoutput" default="true" />
        <element name="optjvmargs" implicit="true" optional="true" />
        <attribute name="filter" default="**/${test.name}.java" />
        <attribute name="exclude" default="" />
        <attribute name="filelist" default="" />
        <attribute name="testtag" default="" />

        <sequential>
            <testmacrohelper inputdir="@{inputdir}" timeout="@{timeout}"
                forkmode="@{forkmode}" filter="@{filter}"
                exclude="@{exclude}" filelist="@{filelist}"
                testtag="@{testtag}" showoutput="false">
                <optjvmargs />
            </testmacrohelper>
            <fail message="Some test(s) failed.">
                <condition>
                    <and>
                        <isset property="testfailed" />
                        <not>
                            <isset property="ant.test.failure.ignore" />
                        </not>
                    </and>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <!--
        The build target builds all the .class files
    -->
    <target name="build" depends="resolver-retrieve-build,build-project"
        description="Compile Cassandra classes" />

    <target name="build_java">
        <javac fork="true"
            compiler="modern"
            debug="true"
            debuglevel="${debuglevel}"
            encoding="utf-8"
            destdir="${build.classes.main}"
            includeantruntime="false"
            source="${ant.java.version}"
            target="${ant.java.version}"
            memorymaximumsize="512M">
            <src path="${build.src.java}" />
            <src path="${build.src.gen-java}" />
            <src path="${interface.thrift.gen-java}" />
            <compilerarg value="-XDignore.symbol.file" />
            <compilerarg line="${java11-jvmargs}" />
            <classpath>
                <path refid="cassandra-stress.classpath" />
            </classpath>
        </javac>
    </target>
    <target depends="init,gen-cql3-grammar"
        name="build-project">
        <echo message="${ant.project.name}: ${ant.file}" />
        <antcall target="build_java" />
        <antcall target="createVersionPropFile" />
        <copy todir="${build.classes.main}">
            <fileset dir="${build.src.resources}" />
        </copy>
        <copy todir="${basedir}/conf" file="${build.classes.main}/META-INF/hotspot_compiler" />
    </target>

    <target name="_write-poms" depends="maven-declare-dependencies">
        <artifact:writepom pomRefId="parent-pom" file="${build.dir}/cassandra-stress-parent.pom" />
        <artifact:writepom pomRefId="thrift-pom"
            file="${build.dir}/${ant.project.name}-thrift-${version}.pom" />
        <artifact:writepom pomRefId="all-pom" file="${build.dir}/cassandra-stress.pom" />
        <artifact:writepom pomRefId="build-deps-pom"
            file="${build.dir}/tmp-cassandra-stress-deps.pom" />
    </target>

    <target name="write-poms" unless="without.maven">
        <antcall target="_write-poms" />
    </target>

    <target name="jar"
        depends="build, write-poms"
        description="Assemble Cassandra-Stress JAR files">
        <mkdir dir="${build.dir}/lib/" />

        <jar destfile="${build.dir}/lib/cassandra-stress.jar">
            <fileset dir="${build.classes.main}" />
        </jar>
    </target>

    <!-- creates release tarballs -->
    <target name="artifacts" depends="jar"
        description="Create Cassandra Stress release artifacts">
        <mkdir dir="${dist.dir}" />
        <!-- fix the control linefeed so that builds on windows works on linux -->
        <fixcrlf srcdir="conf" includes="**/*" eol="lf" eof="remove" />
        <fixcrlf srcdir="bin" includes="**/*" eol="lf" eof="remove" />
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.dir.lib}/jars" />
            <fileset dir="${build.dir.lib}">
                <include name="cassandra-stress.jar" />
            </fileset>
        </copy>

        <copy todir="${dist.dir}/conf">
            <fileset dir="conf" />
        </copy>

        <copy todir="${dist.dir}/bin">
            <fileset dir="bin" />
        </copy>

        <copy todir="${dist.dir}/">
            <fileset dir="${basedir}">
                <include name="*.txt" />
            </fileset>
        </copy>

        <copy todir="${dist.dir}/examples/">
            <fileset dir="${basedir}/examples/">
                <include name="*.yaml" />
            </fileset>
        </copy>

        <tar compression="gzip" longfile="gnu"
            destfile="${build.dir}/cassandra-stress-bin.tar.gz">

            <!-- Everything but bin/ (default mode) -->
            <tarfileset dir="${dist.dir}" prefix="cassandra-stress">
                <include name="**" />
                <exclude name="bin/*" />
            </tarfileset>

            <!-- Executable scripts in bin/ -->
            <tarfileset dir="${dist.dir}" prefix="cassandra-stress" mode="755">
                <include name="bin/*" />
                <exclude name="bin/*.in.sh" />
            </tarfileset>
        </tar>

        <tar compression="gzip" longfile="gnu"
            destfile="${build.dir}/cassandra-stress-src.tar.gz">

            <tarfileset dir="${basedir}"
                prefix="cassandra-stress-src">
                <include name="**" />
                <exclude name="build/**" />
                <exclude name="lib/**" />
                <exclude name="src/gen-java/**" />
                <exclude name=".git/**" />
                <exclude name="venv/**" />
                <exclude name="src/resources/org/apache/cassandra/config/version.properties" />
                <exclude name="conf/hotspot_compiler" />
                <exclude name="doc/cql3/CQL.html" />
                <exclude name="bin/*" /> <!-- handled separately below -->
                <!-- exclude python generated files -->
                <exclude name="**/__pycache__/**" />
                <!-- exclude Eclipse files -->
                <exclude name=".project" />
                <exclude name=".classpath" />
                <exclude name=".settings/**" />
                <exclude name=".externalToolBuilders/**" />
                <!-- exclude NetBeans files -->
                <exclude name="ide/nbproject/private/**" />
                <exclude name="Dockerfile" />
                <exclude name=".dockerignore" />
            </tarfileset>

            <!-- Everything else (assumed to be scripts), is executable -->
            <tarfileset dir="${basedir}" prefix="cassandra-stress-src" mode="755">
                <include name="tools/bin/*" />
            </tarfileset>
        </tar>

        <checksum forceOverwrite="yes" todir="${build.dir}" fileext=".sha256" algorithm="SHA-256">
            <fileset dir="${build.dir}">
                <include name="cassandra-stress-bin.tar.gz" />
                <include name="cassandra-stress-src.tar.gz" />
            </fileset>
        </checksum>
        <checksum forceOverwrite="yes" todir="${build.dir}" fileext=".sha512" algorithm="SHA-512">
            <fileset dir="${build.dir}">
                <include name="cassandra-stress-bin.tar.gz" />
                <include name="cassandra-stress-src.tar.gz" />
            </fileset>
        </checksum>
    </target>
    <target name="build-test" depends="build, write-poms, resolver-dist-lib"
        description="Compile test classes" unless="no-build-test">
        <javac
            compiler="modern"
            debug="true"
            debuglevel="${debuglevel}"
            destdir="${test.classes}"
            includeantruntime="true"
            source="${source.version}"
            target="${target.version}"
            encoding="utf-8">
            <classpath>
                <path refid="cassandra-stress.classpath.test" />
                <path refid="cassandra-stress.classpath" />
            </classpath>
            <src path="${test.unit.src}" />
        </javac>

        <!-- Non-java resources needed by the test suite -->
        <copy todir="${test.classes}">
            <fileset dir="${test.resources}" />
        </copy>
    </target>

    <!-- Run tests separately and report errors after and generate a junit report -->
    <macrodef name="testhelper">
        <attribute name="testdelegate" />
        <sequential>
            <testhelper_ testdelegate="@{testdelegate}" />
            <fail message="Some test(s) failed.">
                <condition>
                    <and>
                        <isset property="testfailed" />
                        <not>
                            <isset property="ant.test.failure.ignore" />
                        </not>
                    </and>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <!-- Defines how to run a set of tests. If you change the defaults for attributes
         you should also update them in testmacro.,
         The two are split because the helper doesn't generate
         The two are split because the helper doesn't generate
         a junit report or fail on errors -->
    <macrodef name="testmacrohelper">
        <attribute name="inputdir" />
        <attribute name="timeout" default="${test.timeout}" />
        <attribute name="forkmode" default="perTest" />
        <element name="optjvmargs" implicit="true" optional="true" />
        <attribute name="filter" default="**/${test.name}.java" />
        <attribute name="exclude" default="" />
        <attribute name="filelist" default="" />
        <attribute name="testtag" default="" />
        <attribute name="showoutput" default="false" />

        <sequential>
            <taskdef name="junit-timeout" classname="org.apache.cassandra.JStackJUnitTask">
                <classpath>
                    <path refid="cassandra-stress.classpath" />
                    <path refid="cassandra-stress.classpath.test" />
                    <pathelement location="${test.classes}" />
                </classpath>
            </taskdef>
            <mkdir dir="${build.test.dir}/cassandra" />
            <mkdir dir="${build.test.dir}/output" />
            <mkdir dir="${build.test.dir}/output/@{testtag}" />
            <junit-timeout fork="on" forkmode="@{forkmode}" failureproperty="testfailed"
                maxmemory="1024m"
                timeout="@{timeout}" showoutput="@{showoutput}">
                <formatter classname="org.apache.cassandra.CassandraXMLJUnitResultFormatter"
                    extension=".xml"
                    usefile="true" />
                <formatter classname="org.apache.cassandra.CassandraBriefJUnitResultFormatter"
                    usefile="false" />
                <jvmarg value="-Dstorage-config=${test.conf}" />
                <jvmarg value="-Djava.awt.headless=true" />
                <!-- Cassandra 3.0+ needs <jvmarg line="... ${additionalagent}" /> here! (not
                value=) -->
                <jvmarg line="-javaagent:${build.lib}/jamm-${jamm.version}.jar" />
                <jvmarg value="-ea" />
                <jvmarg value="-Djava.io.tmpdir=${tmp.dir}" />
                <jvmarg value="-Dcassandra.debugrefcount=true" />
                <jvmarg value="-Xss256k" />
                <!-- When we do classloader manipulation SoftReferences can cause memory leaks
                     that can OOM our test runs. The next two settings informs our GC
                     algorithm to limit the metaspace size and clean up SoftReferences
                     more aggressively rather than waiting. See CASSANDRA-14922 for more details.
                -->
                <jvmarg value="-XX:MaxMetaspaceSize=384M" />
                <jvmarg value="-XX:SoftRefLRUPolicyMSPerMB=0" />
                <jvmarg value="-Dcassandra.memtable_row_overhead_computation_step=100" />
                <jvmarg value="-Dcassandra.test.use_prepared=${cassandra.test.use_prepared}" />
                <jvmarg value="-Dcassandra.test.sstableformatdevelopment=true" />
                <!-- The first time SecureRandom initializes can be slow if it blocks on /dev/random -->
                <jvmarg value="-Djava.security.egd=file:/dev/urandom" />
                <jvmarg value="-Dcassandra.testtag=@{testtag}" />
                <jvmarg value="-Dcassandra.keepBriefBrief=${cassandra.keepBriefBrief}" />
                <jvmarg value="-Dcassandra.strict.runtime.checks=true" />
                <jvmarg line="${java11-jvmargs}" />
                <!-- disable shrinks in quicktheories CASSANDRA-15554 -->
                <jvmarg value="-DQT_SHRINKS=0" />
                <optjvmargs />
                <!-- Uncomment to debug unittest, attach debugger to port 1416 -->
                <!--
                <jvmarg line="-agentlib:jdwp=transport=dt_socket,address=localhost:1416,server=y,suspend=y" />
                -->
                <classpath>
                    <pathelement path="${java.class.path}" />
                    <path refid="cassandra-stress.classpath" />
                    <path refid="cassandra-stress.classpath.test" />
                    <pathelement location="${test.classes}" />
                    <pathelement location="${test.conf}" />
                </classpath>
                <batchtest todir="${build.test.dir}/output/@{testtag}">
                    <fileset dir="@{inputdir}" includes="@{filter}" excludes="@{exclude}" />
                    <filelist dir="@{inputdir}" files="@{filelist}" />
                </batchtest>
            </junit-timeout>

            <delete quiet="true" failonerror="false" dir="${build.test.dir}/cassandra/commitlog" />
            <delete quiet="true" failonerror="false" dir="${build.test.dir}/cassandra/cdc_raw" />
            <delete quiet="true" failonerror="false" dir="${build.test.dir}/cassandra/data" />
            <delete quiet="true" failonerror="false" dir="${build.test.dir}/cassandra/saved_caches" />
            <delete quiet="true" failonerror="false" dir="${build.test.dir}/cassandra/hints" />
        </sequential>
    </macrodef>

    <target name="testold" depends="build-test" description="Execute unit tests">
        <testmacro inputdir="${test.unit.src}" timeout="${test.timeout}">
            <jvmarg value="-Dlegacy-sstable-root=${test.data}/legacy-sstables" />
            <jvmarg value="-Dinvalid-legacy-sstable-root=${test.data}/invalid-legacy-sstables" />
            <jvmarg value="-Dmigration-sstable-root=${test.data}/migration-sstables" />
            <jvmarg value="-Dcassandra.ring_delay_ms=1000" />
            <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
            <jvmarg value="-Dcassandra.skip_sync=true" />
        </testmacro>
        <fileset dir="${test.unit.src}" />
    </target>

    <!-- Will not generate a junit report or fail on error  -->
    <macrodef name="testlist">
        <attribute name="test.file.list" />
        <sequential>
            <testmacrohelper inputdir="${test.dir}/${test.classlistprefix}"
                filelist="@{test.file.list}"
                exclude="**/*.java" timeout="${test.timeout}">
                <jvmarg value="-Dlegacy-sstable-root=${test.data}/legacy-sstables" />
                <jvmarg value="-Dinvalid-legacy-sstable-root=${test.data}/invalid-legacy-sstables" />
                <jvmarg value="-Dmigration-sstable-root=${test.data}/migration-sstables" />
                <jvmarg value="-Dcassandra.ring_delay_ms=1000" />
                <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
                <jvmarg value="-Dcassandra.skip_sync=true" />
            </testmacrohelper>
        </sequential>
    </macrodef>

    <!-- Will not generate a junit report  -->
    <macrodef name="testlist-compression">
        <attribute name="test.file.list" />
        <sequential>
            <testmacrohelper inputdir="${test.unit.src}" filelist="@{test.file.list}"
                exclude="**/*.java" timeout="${test.timeout}" testtag="compression">
                <jvmarg value="-Dlegacy-sstable-root=${test.data}/legacy-sstables" />
                <jvmarg value="-Dinvalid-legacy-sstable-root=${test.data}/invalid-legacy-sstables" />
                <jvmarg value="-Dmigration-sstable-root=${test.data}/migration-sstables" />
                <jvmarg value="-Dcassandra.test.compression=true" />
                <jvmarg value="-Dcassandra.ring_delay_ms=1000" />
                <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
                <jvmarg value="-Dcassandra.config=file:///${compressed_yaml}" />
                <jvmarg value="-Dcassandra.skip_sync=true" />
            </testmacrohelper>
        </sequential>
    </macrodef>

    <macrodef name="testlist-cdc">
        <attribute name="test.file.list" />
        <sequential>
            <property name="cdc_yaml" value="${build.test.dir}/cassandra.cdc.yaml" />
            <concat destfile="${cdc_yaml}">
                <fileset file="${test.conf}/cassandra.yaml" />
                <fileset file="${test.conf}/cdc.yaml" />
            </concat>
            <testmacrohelper inputdir="${test.unit.src}" filelist="@{test.file.list}"
                exclude="**/*.java" timeout="${test.timeout}" testtag="cdc">
                <jvmarg value="-Dlegacy-sstable-root=${test.data}/legacy-sstables" />
                <jvmarg value="-Dinvalid-legacy-sstable-root=${test.data}/invalid-legacy-sstables" />
                <jvmarg value="-Dmigration-sstable-root=${test.data}/migration-sstables" />
                <jvmarg value="-Dcassandra.ring_delay_ms=1000" />
                <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
                <jvmarg value="-Dcassandra.config=file:///${cdc_yaml}" />
                <jvmarg value="-Dcassandra.skip_sync=true" />
            </testmacrohelper>
        </sequential>
    </macrodef>

    <!-- Use this with an FQDN for test class, and an optional csv list of methods like this:
      ant testsome -Dtest.name=org.apache.cassandra.service.StorageServiceServerTest
      ant testsome -Dtest.name=org.apache.cassandra.service.StorageServiceServerTest
    -Dtest.methods=testRegularMode,testGetAllRangesEmpty
    -->
    <target name="testsome" depends="build-test" description="Execute specific unit tests">
        <testmacro inputdir="${test.unit.src}" timeout="${test.timeout}">
            <test unless:blank="${test.methods}" name="${test.name}" methods="${test.methods}"
                outfile="build/test/output/TEST-${test.name}-${test.methods}" />
            <test if:blank="${test.methods}" name="${test.name}"
                outfile="build/test/output/TEST-${test.name}" />
            <jvmarg value="-Dlegacy-sstable-root=${test.data}/legacy-sstables" />
            <jvmarg value="-Dinvalid-legacy-sstable-root=${test.data}/invalid-legacy-sstables" />
            <jvmarg value="-Dmigration-sstable-root=${test.data}/migration-sstables" />
            <jvmarg value="-Dcassandra.ring_delay_ms=1000" />
            <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
            <jvmarg value="-Dcassandra.skip_sync=true" />
        </testmacro>
    </target>


    <target name="test-cdc" depends="build-test"
        description="Execute unit tests with change-data-capture enabled">
        <path id="all-test-classes-path">
            <fileset dir="${test.unit.src}" includes="**/${test.name}.java" />
        </path>
        <property name="all-test-classes" refid="all-test-classes-path" />
        <testhelper testdelegate="testlist-cdc" />
    </target>
    <target name="msg-ser-gen-test" depends="build-test"
        description="Generates message serializations">
        <testmacro inputdir="${test.unit.src}"
            timeout="${test.timeout}" filter="**/SerializationsTest.java">
            <jvmarg value="-Dcassandra.test-serialization-writes=True" />
        </testmacro>
    </target>
    <target name="msg-ser-test" depends="build-test" description="Tests message serializations">
        <testmacro inputdir="${test.unit.src}" timeout="${test.timeout}"
            filter="**/SerializationsTest.java" />
    </target>
    <target name="msg-ser-test-7" depends="build-test"
        description="Generates message serializations">
        <testmacro inputdir="${test.unit.src}"
            timeout="${test.timeout}" filter="**/SerializationsTest.java">
            <jvmarg value="-Dcassandra.version=0.7" />
        </testmacro>
    </target>
    <target name="msg-ser-test-10" depends="build-test"
        description="Tests message serializations on 1.0 messages">
        <testmacro inputdir="${test.unit.src}"
            timeout="${test.timeout}" filter="**/SerializationsTest.java">
            <jvmarg value="-Dcassandra.version=1.0" />
        </testmacro>
    </target>

    <target name="cql-test" depends="build-test" description="Execute CQL tests">
        <sequential>
            <echo message="running CQL tests" />
            <mkdir dir="${build.test.dir}/cassandra" />
            <mkdir dir="${build.test.dir}/output" />
            <junit fork="on" forkmode="once" failureproperty="testfailed" maxmemory="1024m"
                timeout="${test.timeout}">
                <formatter type="brief" usefile="false" />
                <jvmarg value="-Dstorage-config=${test.conf}" />
                <jvmarg value="-Djava.awt.headless=true" />
                <jvmarg value="-javaagent:${build.lib}/jamm-${jamm.version}.jar" />
                <jvmarg value="-ea" />
                <jvmarg value="-Xss256k" />
                <jvmarg value="-Dcassandra.memtable_row_overhead_computation_step=100" />
                <jvmarg value="-Dcassandra.test.use_prepared=${cassandra.test.use_prepared}" />
                <jvmarg value="-Dcassandra.skip_sync=true" />
                <classpath>
                    <path refid="cassandra-stress.classpath.test" />
                    <pathelement location="${test.classes}" />
                    <pathelement location="${test.conf}" />
                    <fileset dir="${test.lib}">
                        <include name="**/*.jar" />
                    </fileset>
                </classpath>
                <batchtest todir="${build.test.dir}/output">
                    <fileset dir="${test.unit.src}" includes="**/cql3/*Test.java">
                        <contains text="CQLTester" casesensitive="yes" />
                    </fileset>
                </batchtest>
            </junit>
            <fail message="Some CQL test(s) failed.">
                <condition>
                    <and>
                        <isset property="testfailed" />
                        <not>
                            <isset property="ant.test.failure.ignore" />
                        </not>
                    </and>
                </condition>
            </fail>
        </sequential>
    </target>
    <target name="cql-test-some" depends="build-test" description="Execute specific CQL tests">
        <sequential>
            <echo message="running ${test.methods} tests from ${test.name}" />
            <mkdir dir="${build.test.dir}/cassandra" />
            <mkdir dir="${build.test.dir}/output" />
            <junit fork="on" forkmode="once" failureproperty="testfailed" maxmemory="1024m"
                timeout="${test.timeout}">
                <formatter type="brief" usefile="false" />
                <jvmarg value="-Dstorage-config=${test.conf}" />
                <jvmarg value="-Djava.awt.headless=true" />
                <jvmarg value="-javaagent:${build.lib}/jamm-${jamm.version}.jar" />
                <jvmarg value="-ea" />
                <jvmarg value="-Xss256k" />
                <jvmarg value="-Dcassandra.test.use_prepared=${cassandra.test.use_prepared}" />
                <jvmarg value="-Dcassandra.memtable_row_overhead_computation_step=100" />
                <jvmarg value="-Dcassandra.skip_sync=true" />
                <classpath>
                    <path refid="cassandra-stress.classpath.test" />
                    <pathelement location="${test.classes}" />
                    <pathelement location="${test.conf}" />
                    <fileset dir="${test.lib}">
                        <include name="**/*.jar" />
                    </fileset>
                </classpath>
                <test unless:blank="${test.methods}" name="org.apache.cassandra.cql3.${test.name}"
                    methods="${test.methods}" todir="${build.test.dir}/output" />
                <test if:blank="${test.methods}" name="org.apache.cassandra.cql3.${test.name}"
                    todir="${build.test.dir}/output" />
            </junit>
        </sequential>
    </target>
    <target name="test-jvm-dtest" depends="build-test" description="Execute in-jvm dtests">
        <testmacro inputdir="${test.distributed.src}" timeout="${test.distributed.timeout}"
            forkmode="once"
            showoutput="true" filter="**/test/*Test.java">
            <jvmarg value="-Dlogback.configurationFile=test/conf/logback-dtest.xml" />
            <jvmarg value="-Dcassandra.ring_delay_ms=10000" />
            <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
            <jvmarg value="-Dcassandra.skip_sync=true" />
        </testmacro>
    </target>
    <target name="test-jvm-upgrade-dtest" depends="build-test" description="Execute in-jvm dtests">
        <testmacro inputdir="${test.distributed.src}" timeout="${test.distributed.timeout}"
            forkmode="once"
            showoutput="true" filter="**/upgrade/*Test.java">
            <jvmarg value="-Dlogback.configurationFile=test/conf/logback-dtest.xml" />
            <jvmarg value="-Dcassandra.ring_delay_ms=10000" />
            <jvmarg value="-Dcassandra.tolerate_sstable_size=true" />
            <jvmarg value="-Dcassandra.skip_sync=true" />
            <jvmarg value="-XX:MaxMetaspaceSize=512M" />
        </testmacro>
    </target>

    <!-- Installs artifacts to local Maven repository -->
    <target name="mvn-install"
        depends="maven-declare-dependencies,jar"
        description="Installs the artifacts in the Maven Local Repository">

        <!-- the parent -->
        <install pomFile="${build.dir}/cassandra-stress-parent.pom"
            file="${build.dir}/cassandra-stress-parent.pom"
            packaging="pom" />

        <!-- the cassandra-thrift jar -->
        <install pomFile="${build.dir}/${ant.project.name}-thrift-${version}.pom"
            file="${build.dir}/${ant.project.name}-thrift-${version}.jar" />
        <install pomFile="${build.dir}/${ant.project.name}-thrift-${version}.pom"
            file="${build.dir}/${ant.project.name}-thrift-${version}-sources.jar"
            classifier="sources" />
        <install pomFile="${build.dir}/${ant.project.name}-thrift-${version}.pom"
            file="${build.dir}/${ant.project.name}-thrift-${version}-javadoc.jar"
            classifier="javadoc" />

        <!-- the cassandra-all jar -->
        <install pomFile="${build.dir}/cassandra-stress.pom"
            file="${build.dir}/cassandra-stress.jar" />
        <install pomFile="${build.dir}/cassandra-stress.pom"
            file="${build.dir}/cassandra-stress-sources.jar"
            classifier="sources" />
        <install pomFile="${build.dir}/cassandra-stress.pom"
            file="${build.dir}/cassandra-stress-javadoc.jar"
            classifier="javadoc" />
    </target>

    <!-- Generate IDEA project description files -->
    <target name="generate-idea-files"
        depends="init,maven-ant-tasks-retrieve-build,gen-cql3-grammar,createVersionPropFile"
        description="Generate IDEA files">
        <mkdir dir=".idea" />
        <mkdir dir=".idea/libraries" />
        <copy todir=".idea">
            <fileset dir="ide/idea" />
        </copy>
        <replace file=".idea/workspace.xml" token="trunk" value="${project.name}" />
        <copy tofile="${project.name}.iml" file="ide/idea-iml-file.xml" />
        <echo file=".idea/.name">Cassandra Stress</echo>
        <echo file=".idea/modules.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/]]>${eclipse.project.name}<![CDATA[.iml" filepath="$PROJECT_DIR$/]]>
            ${eclipse.project.name}<![CDATA[.iml" />
    </modules>
  </component>
</project>]]></echo>
    </target>

    <pathconvert property="project.name">
        <path path="${basedir}" />
        <regexpmapper from="^.*/([^/]+)$$" to="\1" handledirsep="yes" />
    </pathconvert>
</project>
